x-airflow-common: &airflow-common
  # Use the custom built image
  build: .
  platform: linux/amd64

  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: '' # Will be generated by entrypoint
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: false
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__WEBSERVER__WEB_SERVER_MASTER_TIMEOUT: 300
    AIRFLOW__WEBSERVER__WEB_SERVER_WORKER_TIMEOUT: 300
    METASHAPE_LICENSE: ${METASHAPE_LICENSE}
#    NAS_ROOT: ${NAS_ROOT}
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:- apache-airflow[amazon]}
  volumes:
    # mount nas_root into the container
    - ${NAS_ROOT}:/mnt/nas_root
    # Mount your custom DAG folder
    - ${HOST_DAGS_DIR:-./dags}:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    # Mount your custom code folder
    - ${HOST_CODE_DIR:-./code}:/opt/airflow/code # Mount your code folder here
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob --hostname \"$${HOSTNAME}\" --limit 1 || exit 1"]
      interval: 30s
      timeout: 30s # Increased timeout for potentially longer checks
      retries: 10
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully


  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          # ... (rest of the warning messages) ...
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins /sources/code # Ensure code dir is created if mapped to /sources
        chown -R "${AIRFLOW_UID:-50000}:0" /sources/{logs,dags,plugins,code}
        # mkdir -p /mnt/nas_root # Ensure nas_root under mnt dir is created
        # chown -R "${AIRFLOW_UID:-50000}:0" /mnt/nas_root}
        exec /entrypoint airflow db init # Changed from 'airflow version' to 'airflow db init' for LocalExecutor
        # Initialize admin user if variables are set
        if [ -n "${_AIRFLOW_WWW_USER_USERNAME}" ] && [ -n "${_AIRFLOW_WWW_USER_PASSWORD}" ]; then
          airflow users create \
            --username "${_AIRFLOW_WWW_USER_USERNAME}" \
            --firstname Admin \
            --lastname User \
            --role Admin \
            --email admin@example.com \
            --password "${_AIRFLOW_WWW_USER_PASSWORD}" || true # '|| true' to not fail if user already exists
        fi
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'false' # DB init is handled by the command now
      _AIRFLOW_WWW_USER_CREATE: 'false' # User creation handled in command
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: '' # Dependencies should be in Dockerfile
    user: "0:0" # Root user to perform chown and db init
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources # This maps your project dir to /sources in init

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow

volumes:
  postgres-db-volume:
